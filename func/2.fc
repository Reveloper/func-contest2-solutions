{-

  TASK 2 - Merge hashmaps (dictionaries)
  Write the method that merges two hashmaps into one. When keys of hashmaps
  interesect - values from first hashmap should be used, while discarded
  key/value pairs should be stored into separate hashmap.
  Method should return two hashmaps (merged_dict, discared_dict). If any
  of resulting hashmaps is empty it should be represented by `null` value.
  Hashmap key length is 256 bit. Each hashmap has at most 256 elements.
-}

() recv_internal() {
}


;; testable
(cell, cell) merge_hashmaps(cell dict1, cell dict2) method_id {

    if (dict1.dict_empty?() & dict2.dict_empty?()) {
        return (null(), null());
    }

    cell mergeddict = new_dict();
    cell discdict = new_dict();


    int key = -1; ;; dict key as loop iterator
    do {
        (key, slice cs, int isSuccess) = dict1.udict_get_next?(256, key);
        if (isSuccess) {
            var ( slice cs2, int isIntersect) = dict2.udict_get?(256, key);
            mergeddict~udict_set(256, key, cs);
            if (isIntersect) {
                discdict~udict_set(256, key, cs2);
            }
        }

    } until (~ isSuccess);


    key = -1;
    do {
        (key, slice cs, int isSuccess) = dict2.udict_get_next?(256, key);
        if (isSuccess) {
            var ( _, int isIntersect) = mergeddict.udict_get?(256, key);
            if (~ isIntersect) {
                mergeddict~udict_set(256, key, cs);
            }
        }
    } until (~ isSuccess);

    mergeddict = mergeddict.dict_empty?() ? null() : mergeddict;
    discdict = discdict.dict_empty?() ? null() : discdict;

    return (mergeddict, discdict);
}
